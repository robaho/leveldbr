// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: leveldbr.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeveldbClient is the client API for Leveldb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeveldbClient interface {
	Connection(ctx context.Context, opts ...grpc.CallOption) (Leveldb_ConnectionClient, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error)
}

type leveldbClient struct {
	cc grpc.ClientConnInterface
}

func NewLeveldbClient(cc grpc.ClientConnInterface) LeveldbClient {
	return &leveldbClient{cc}
}

func (c *leveldbClient) Connection(ctx context.Context, opts ...grpc.CallOption) (Leveldb_ConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Leveldb_ServiceDesc.Streams[0], "/remote.Leveldb/Connection", opts...)
	if err != nil {
		return nil, err
	}
	x := &leveldbConnectionClient{stream}
	return x, nil
}

type Leveldb_ConnectionClient interface {
	Send(*InMessage) error
	Recv() (*OutMessage, error)
	grpc.ClientStream
}

type leveldbConnectionClient struct {
	grpc.ClientStream
}

func (x *leveldbConnectionClient) Send(m *InMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *leveldbConnectionClient) Recv() (*OutMessage, error) {
	m := new(OutMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *leveldbClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := c.cc.Invoke(ctx, "/remote.Leveldb/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeveldbServer is the server API for Leveldb service.
// All implementations must embed UnimplementedLeveldbServer
// for forward compatibility
type LeveldbServer interface {
	Connection(Leveldb_ConnectionServer) error
	Remove(context.Context, *RemoveRequest) (*RemoveReply, error)
	mustEmbedUnimplementedLeveldbServer()
}

// UnimplementedLeveldbServer must be embedded to have forward compatible implementations.
type UnimplementedLeveldbServer struct {
}

func (UnimplementedLeveldbServer) Connection(Leveldb_ConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method Connection not implemented")
}
func (UnimplementedLeveldbServer) Remove(context.Context, *RemoveRequest) (*RemoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedLeveldbServer) mustEmbedUnimplementedLeveldbServer() {}

// UnsafeLeveldbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeveldbServer will
// result in compilation errors.
type UnsafeLeveldbServer interface {
	mustEmbedUnimplementedLeveldbServer()
}

func RegisterLeveldbServer(s grpc.ServiceRegistrar, srv LeveldbServer) {
	s.RegisterService(&Leveldb_ServiceDesc, srv)
}

func _Leveldb_Connection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LeveldbServer).Connection(&leveldbConnectionServer{stream})
}

type Leveldb_ConnectionServer interface {
	Send(*OutMessage) error
	Recv() (*InMessage, error)
	grpc.ServerStream
}

type leveldbConnectionServer struct {
	grpc.ServerStream
}

func (x *leveldbConnectionServer) Send(m *OutMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *leveldbConnectionServer) Recv() (*InMessage, error) {
	m := new(InMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Leveldb_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeveldbServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Leveldb/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeveldbServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Leveldb_ServiceDesc is the grpc.ServiceDesc for Leveldb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Leveldb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote.Leveldb",
	HandlerType: (*LeveldbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Remove",
			Handler:    _Leveldb_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connection",
			Handler:       _Leveldb_Connection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "leveldbr.proto",
}
